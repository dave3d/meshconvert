#! /usr/bin/env python3

""" Tests for glbutils.py """

import unittest
import trimesh
from glbutils import setFaceColor, getSceneMesh
# from glbutils import removeVertexColor

class TestGlbUtils(unittest.TestCase):
    """ Class to test glbutils. The tests were all generated by Github Copilot. """

# Generated by Copilot.  Doesn't work.
#    def test_removeVertexColor(self):
        # Create a mesh with vertex colors
#        mesh = trimesh.creation.icosphere()
        #mesh.visual.vertex_colors = trimesh.visual.color.random_color(len(mesh.vertices))

        # Remove vertex colors
#        removeVertexColor(mesh)

        # Check if vertex attributes are cleared
#        self.assertEqual(len(mesh.visual.vertex_attributes), 0)

    def test_setFaceColor(self):
        """ Test setFaceColor. """
        # Create a mesh
        mesh = trimesh.creation.icosphere()

        # Set face color
        color = [255, 0, 0, 255]  # Red color in RGBA
        setFaceColor(mesh, color)

        # Check if face color is set correctly
        self.assertTrue((mesh.visual.face_colors == color).all())

    def test_getSceneMesh_single_mesh(self):
        """ Test getSceneMesh for a scene with a single mesh. """
        # Create a scene with a single mesh
        mesh = trimesh.creation.icosphere()
        scene = trimesh.Scene(mesh)

        # Get the first mesh
        result = getSceneMesh(scene)

        # Check if the correct mesh is returned
        self.assertEqual(result, mesh)

    def test_getSceneMesh_multiple_meshes(self):
        """ Test getSceneMesh for a scene with multiple meshes. """
        # Create a scene with multiple meshes
        mesh1 = trimesh.creation.icosphere()
        mesh2 = trimesh.creation.box()
        scene = trimesh.Scene([mesh1, mesh2])

        # Get the first mesh
        result = getSceneMesh(scene)

        # Check if the first mesh is returned
        self.assertEqual(result, mesh1)

    def test_getSceneMesh_no_mesh(self):
        """ Test getSceneMesh for a scene with no mesh. """
        # Create an empty scene
        scene = trimesh.Scene()

        # Get the first mesh
        result = getSceneMesh(scene)
        print(result)

        # Check if None is returned
        self.assertIsNone(result)

if __name__ == '__main__':
    unittest.main()
